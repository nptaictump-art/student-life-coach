import os
import io
import pickle
from datetime import date, timedelta, datetime
from urllib.parse import urlparse

from flask import (
    Flask, render_template, request, redirect, url_for, flash, session, send_file
)
from dateutil import parser
from google.auth.transport.requests import Request
from google_auth_oauthlib.flow import Flow
from googleapiclient.discovery import build
from flask_sqlalchemy import SQLAlchemy

# =========================
# C·∫§U H√åNH ·ª®NG D·ª§NG & SESSION
# =========================
app = Flask(__name__)

# Secret key ph·∫£i c·ªë ƒë·ªãnh ƒë·ªÉ session kh√¥ng m·∫•t gi·ªØa 2 request OAuth
app.secret_key = os.getenv("FLASK_SECRET_KEY", "student_coach_final_2025")

# Cookie c·∫•u h√¨nh cho HTTPS (Render) ƒë·ªÉ tr√°nh m·∫•t session -> l·ªói CSRF state
app.config["SESSION_COOKIE_SECURE"] = True
app.config["SESSION_COOKIE_SAMESITE"] = "None"

# Cho ph√©p HTTP khi dev (local/Codespaces)
os.environ.setdefault("OAUTHLIB_INSECURE_TRANSPORT", "1")

# =========================
# GOOGLE OAUTH2 CONFIG
# =========================
SCOPES = [
    "https://www.googleapis.com/auth/calendar",
    "https://www.googleapis.com/auth/userinfo.email",
    "https://www.googleapis.com/auth/userinfo.profile",
    "openid",
]

CREDENTIALS_FILE = "credentials.json"
GOOGLE_ENABLED = os.path.exists(CREDENTIALS_FILE)

# =========================
# K·∫æT N·ªêI DATABASE (PostgreSQL tr√™n Render)
# =========================
DATABASE_URL = os.getenv("DATABASE_URL")
if DATABASE_URL:
    # Chu·∫©n h√≥a: postgres:// -> postgresql+psycopg://
    if DATABASE_URL.startswith("postgres://"):
        DATABASE_URL = DATABASE_URL.replace("postgres://", "postgresql+psycopg://", 1)
    elif DATABASE_URL.startswith("postgresql://") and "+psycopg" not in DATABASE_URL:
        DATABASE_URL = DATABASE_URL.replace("postgresql://", "postgresql+psycopg://", 1)
else:
    # Fallback local
    DATABASE_URL = "sqlite:///local.db"

app.config["SQLALCHEMY_DATABASE_URI"] = DATABASE_URL
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
db = SQLAlchemy(app)

# =========================
# MODEL ƒê∆†N GI·∫¢N
# =========================
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(255), unique=True, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

class ImportLog(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(255))
    total_rows = db.Column(db.Integer, default=0)
    success = db.Column(db.Integer, default=0)
    failed = db.Column(db.Integer, default=0)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

# =========================
# H·ªñ TR·ª¢ GOOGLE CALENDAR
# =========================
def build_flow(redirect_uri: str, state: str | None = None) -> Flow:
    """T·∫°o Flow m·ªõi t·ª´ credentials.json m·ªói l·∫ßn c·∫ßn (tr√°nh l·ªói state)."""
    if not GOOGLE_ENABLED:
        return None
    flow = Flow.from_client_secrets_file(CREDENTIALS_FILE, scopes=SCOPES, redirect_uri=redirect_uri)
    if state:
        flow.oauth2session._state = state  # g√°n state c≈© v√†o l·∫°i flow
    return flow

def get_token_filename(email):
    safe_email = (email or "anonymous").replace("@", "_").replace(".", "_")
    return f"token_{safe_email}.pickle"

def get_google_calendar_service():
    """Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng Calendar API n·∫øu ƒë√£ x√°c th·ª±c."""
    if not GOOGLE_ENABLED:
        return None
    email = session.get("google_email")
    token_file = get_token_filename(email)
    creds = None
    if os.path.exists(token_file):
        with open(token_file, "rb") as f:
            creds = pickle.load(f)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            return None
    return build("calendar", "v3", credentials=creds)

# =========================
# TRANG CH√çNH
# =========================
@app.route("/")
def dashboard():
    user = {"streak": 5, "total_points": 120, "email": session.get("google_email") or "student@example.com"}
    completion_rate = 85
    days = [(date.today() - timedelta(days=i)).strftime("%d/%m") for i in range(6, -1, -1)]
    counts = [2, 1, 3, 2, 0, 2, 3]

    events = []
    if session.get("google_email"):
        service = get_google_calendar_service()
        if service:
            now = datetime.utcnow().isoformat() + "Z"
            week_ahead = (datetime.utcnow() + timedelta(days=7)).isoformat() + "Z"
            results = service.events().list(
                calendarId="primary",
                timeMin=now,
                timeMax=week_ahead,
                maxResults=50,
                singleEvents=True,
                orderBy="startTime",
            ).execute()
            events = results.get("items", [])

    return render_template(
        "dashboard.html",
        user=user,
        completion_rate=completion_rate,
        days=days,
        counts=counts,
        google_enabled=GOOGLE_ENABLED,
        authenticated=("google_email" in session),
        events=events,
    )

# =========================
# FORM T·∫†O S·ª∞ KI·ªÜN ƒê∆†N L·∫∫
# =========================
@app.route("/add_event")
def add_event_form():
    return render_template("add_event.html", google_enabled=GOOGLE_ENABLED, authenticated=("google_email" in session))

@app.route("/add_event", methods=["POST"])
def add_event():
    title = request.form["title"]
    date_str = request.form["date"]
    start_time = request.form["start_time"]
    end_time = request.form["end_time"]
    description = request.form.get("description", "")

    if not GOOGLE_ENABLED:
        flash("‚ÑπÔ∏è Google Calendar ch·ªâ ho·∫°t ƒë·ªông khi c√≥ credentials.json.", "info")
        return redirect(url_for("add_event_form"))

    try:
        start_dt = parser.parse(f"{date_str} {start_time}")
        end_dt = parser.parse(f"{date_str} {end_time}")
        service = get_google_calendar_service()
        if not service:
            return redirect(url_for("authorize"))

        event = {
            "summary": title,
            "description": description,
            "start": {"dateTime": start_dt.isoformat(), "timeZone": "Asia/Ho_Chi_Minh"},
            "end": {"dateTime": end_dt.isoformat(), "timeZone": "Asia/Ho_Chi_Minh"},
            "reminders": {"useDefault": False, "overrides": [{"method": "popup", "minutes": 15}]},
        }

        created_event = service.events().insert(calendarId="primary", body=event).execute()
        flash(f'‚úÖ ƒê√£ t·∫°o s·ª± ki·ªán "{title}"! Xem t·∫°i: {created_event.get("htmlLink")}', "success")
    except Exception as e:
        flash(f"‚ùå L·ªói khi t·∫°o s·ª± ki·ªán: {str(e)}", "error")
    return redirect(url_for("add_event_form"))

# =========================
# OAUTH FLOW
# =========================
def _redirect_base():
    # T·ª± suy lu·∫≠n domain hi·ªán t·∫°i cho redirect_uri
    # ∆Øu ti√™n bi·∫øn m√¥i tr∆∞·ªùng, n·∫øu kh√¥ng th√¨ l·∫•y t·ª´ request.host_url
    host = os.getenv("PUBLIC_BASE_URL")
    if not host:
        # request.host_url v√≠ d·ª•: https://student-life-coach-mwsd.onrender.com/
        host = request.host_url.rstrip("/")
    return f"{host}/oauth2callback"

@app.route("/authorize")
def authorize():
    if not GOOGLE_ENABLED:
        flash("‚ö†Ô∏è Thi·∫øu credentials.json ‚Äî kh√¥ng th·ªÉ x√°c th·ª±c Google Calendar.", "error")
        return redirect(url_for("dashboard"))

    flow = build_flow(redirect_uri=_redirect_base())
    authorization_url, state = flow.authorization_url(
        access_type="offline",
        include_granted_scopes="true",
        prompt="consent",
    )
    session["state"] = state
    return redirect(authorization_url)

@app.route("/oauth2callback")
def oauth2callback():
    if not GOOGLE_ENABLED:
        flash("‚ö†Ô∏è Thi·∫øu credentials.json ‚Äî kh√¥ng th·ªÉ x√°c th·ª±c Google Calendar.", "error")
        return redirect(url_for("dashboard"))

    try:
        # Rebuild Flow v·ªõi state c≈© ƒë·ªÉ tr√°nh mismatching_state
        state = session.get("state")
        flow = build_flow(redirect_uri=_redirect_base(), state=state)
        flow.fetch_token(authorization_response=request.url)
        creds = flow.credentials

        # L·∫•y info user
        oauth2 = build("oauth2", "v2", credentials=creds)
        user_info = oauth2.userinfo().get().execute()
        email = user_info.get("email")
        session["google_email"] = email

        # L∆∞u token theo email
        token_file = get_token_filename(email)
        with open(token_file, "wb") as f:
            pickle.dump(creds, f)

        # L∆∞u user v√†o DB
        if not User.query.filter_by(email=email).first():
            db.session.add(User(email=email))
            db.session.commit()

        flash(f"‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi {email}!", "success")
    except Exception as e:
        flash(f"‚ùå Google authentication error: {str(e)}", "error")
    return redirect(url_for("dashboard"))

@app.route("/logout_google")
def logout_google():
    session.pop("google_email", None)
    flash("üëã ƒê√£ ng·∫Øt k·∫øt n·ªëi Google Calendar.", "info")
    return redirect(url_for("dashboard"))

# =========================
# UPLOAD EXCEL -> T·∫†O S·ª∞ KI·ªÜN GOOGLE CALENDAR
# =========================
# Y√™u c·∫ßu: pandas + openpyxl trong requirements.txt
import pandas as pd

@app.route("/upload")
def upload_form():
    # Trang upload
    return render_template(
        "upload.html",
        google_enabled=GOOGLE_ENABLED,
        authenticated=("google_email" in session)
    )

@app.route("/upload", methods=["POST"])
def upload_process():
    if "google_email" not in session:
        flash("‚ö†Ô∏è H√£y ƒëƒÉng nh·∫≠p Google tr∆∞·ªõc khi import l·ªãch.", "warning")
        return redirect(url_for("upload_form"))

    if "file" not in request.files or request.files["file"].filename == "":
        flash("‚ùå Vui l√≤ng ch·ªçn file Excel (.xlsx) ho·∫∑c CSV.", "error")
        return redirect(url_for("upload_form"))

    file = request.files["file"]
    filename = file.filename.lower()

    try:
        # ƒê·ªçc d·ªØ li·ªáu
        if filename.endswith(".xlsx"):
            df = pd.read_excel(file)
        elif filename.endswith(".csv"):
            df = pd.read_csv(file)
        else:
            flash("‚ùå ƒê·ªãnh d·∫°ng kh√¥ng h·ªó tr·ª£. Ch·ªâ nh·∫≠n .xlsx ho·∫∑c .csv", "error")
            return redirect(url_for("upload_form"))

        # Chu·∫©n c·ªôt: ch·∫•p nh·∫≠n c·∫£ hoa/th∆∞·ªùng
        cols_map = {c.strip().lower(): c for c in df.columns}
        required = [
            "s·ªë th·ª© t·ª±",
            "ng√†y",
            "th√°ng",
            "nƒÉm",
            "gi·ªù",
            "n·ªôi dung nh·∫Øc nh·ªü",
            "th·ªùi gian nh·∫Øc nh·ªü (ph√∫t tr∆∞·ªõc)",
            "th·ªùi gian k·∫øt th√∫c (hh:mm)",
        ]
        for col in required:
            if col not in [k.strip().lower() for k in df.columns]:
                flash(f"‚ùå Thi·∫øu c·ªôt b·∫Øt bu·ªôc: {col}", "error")
                return redirect(url_for("upload_form"))

        service = get_google_calendar_service()
        if not service:
            return redirect(url_for("authorize"))

        successes = 0
        failures = 0
        tz = "Asia/Ho_Chi_Minh"

        for _, row in df.iterrows():
            try:
                ngay = int(row[cols_map["ng√†y"]])
                thang = int(row[cols_map["th√°ng"]])
                nam = int(row[cols_map["nƒÉm"]])

                gio_bat_dau = str(row[cols_map["gi·ªù"]]).strip()  # "HH:MM"
                gio_ket_thuc = str(row[cols_map["th·ªùi gian k·∫øt th√∫c (hh:mm)"]]).strip()
                minutes_before = int(row[cols_map["th·ªùi gian nh·∫Øc nh·ªü (ph√∫t tr∆∞·ªõc)"]])

                start_dt = parser.parse(f"{nam}-{thang:02d}-{ngay:02d} {gio_bat_dau}")
                end_dt = parser.parse(f"{nam}-{thang:02d}-{ngay:02d} {gio_ket_thuc}")

                title = str(row[cols_map["n·ªôi dung nh·∫Øc nh·ªü"]]).strip()

                event = {
                    "summary": title,
                    "start": {"dateTime": start_dt.isoformat(), "timeZone": tz},
                    "end": {"dateTime": end_dt.isoformat(), "timeZone": tz},
                    "reminders": {"useDefault": False, "overrides": [{"method": "popup", "minutes": minutes_before}]},
                }
                service.events().insert(calendarId="primary", body=event).execute()
                successes += 1
            except Exception:
                failures += 1

        # L∆∞u log
        db.session.add(ImportLog(
            email=session.get("google_email"),
            total_rows=len(df),
            success=successes,
            failed=failures
        ))
        db.session.commit()

        flash(f"‚úÖ Import xong! Th√†nh c√¥ng: {successes}, l·ªói: {failures}.", "success")
    except Exception as e:
        flash(f"‚ùå L·ªói khi x·ª≠ l√Ω file: {str(e)}", "error")

    return redirect(url_for("upload_form"))

# Cho ph√©p t·∫£i file m·∫´u (n·∫øu b·∫°n mu·ªën cung c·∫•p qua server)
@app.route("/download-template")
def download_template():
    # Tr·∫£ file m·∫´u gi·ªëng b·∫£n m√¨nh ƒë√£ g·ª≠i k√®m trong cu·ªôc tr√≤ chuy·ªán
    # N·∫øu b·∫°n mu·ªën ship s·∫µn t·ª´ server: c√≥ th·ªÉ generate ƒë·ªông nh∆∞ sau
    import pandas as pd
    cols = [
        "S·ªë th·ª© t·ª±",
        "ng√†y",
        "th√°ng",
        "nƒÉm",
        "gi·ªù",
        "n·ªôi dung nh·∫Øc nh·ªü",
        "th·ªùi gian nh·∫Øc nh·ªü (ph√∫t tr∆∞·ªõc)",
        "th·ªùi gian k·∫øt th√∫c (HH:MM)"
    ]
    sample = [
        [1, 20, 10, 2025, "08:30", "H·ªçc To√°n ch∆∞∆°ng 3", 15, "09:30"],
        [2, 21, 10, 2025, "14:00", "N·ªôp b√†i b√°o c√°o m√¥n L√Ω", 30, "15:00"],
    ]
    df = pd.DataFrame(sample, columns=cols)
    buf = io.BytesIO()
    with pd.ExcelWriter(buf, engine="openpyxl") as writer:
        df.to_excel(writer, index=False)
    buf.seek(0)
    return send_file(
        buf,
        mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        as_attachment=True,
        download_name="mau_import_lich_hoc.xlsx",
    )

# =========================
# M·ªòT S·ªê N√öT NHANH
# =========================
@app.route("/mark_complete")
def mark_complete():
    flash("üî• ƒê√£ ƒë√°nh d·∫•u ho√†n th√†nh h√¥m nay!", "success")
    return redirect(url_for("dashboard"))

# =========================
# CH·∫†Y ·ª®NG D·ª§NG
# =========================
if __name__ == "__main__":
    with app.app_context():
        db.create_all()
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
